{"version":3,"sources":["mocks/$mock.ts","app/hooks.ts","mocks/auth/sign-in.ts","features/api.ts","features/auth/authAPI.ts","features/auth/initial.ts","features/auth/authSlice.tsx","pages/signIn/SignIn.tsx","pages/signUp/SignUp.tsx","router/route.tsx","App.tsx","app/store.ts","index.tsx"],"names":["client","useAppDispatch","useDispatch","useAppSelector","useSelector","signIn","post","request","a","response","user","name","email","data","password","accessToken","axios","create","baseURL","timeout","mockServer","path","methods","mock0","api","initialState","loading","signUp","signInAsync","createAsyncThunk","thunkApi","then","res","catch","e","rejectWithValue","errorMessage","signUpAsync","authSlice","createSlice","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","console","log","theme","createTheme","SignIn","dispatch","useForm","register","handleSubmit","ThemeProvider","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Typography","variant","onSubmit","noValidate","mt","TextField","margin","label","fullWidth","autoComplete","autoFocus","required","type","FormControlLabel","control","Checkbox","value","color","Button","mb","Grid","container","item","xs","to","SignUp","spacing","justifyContent","AppRouter","hasAccessToken","auth","basename","process","element","App","store","configureStore","reducer","authReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.608b8f03.chunk.js","sourcesContent":["/* eslint-disable */\nimport { AxiosInstance } from 'axios'\nimport mockServer from 'axios-mock-server'\nimport mock0 from './auth/sign-in'\n\nexport default (client?: AxiosInstance) =>\n  mockServer(\n    [\n      {\n        path: '/auth/sign-in',\n        methods: mock0,\n      },\n    ],\n    client,\n    ''\n  )\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { MockMethods, MockResponse } from 'axios-mock-server';\nimport { SignInRequest, SignInResponse } from 'types/auth'\n\nconst signIn: MockMethods = {\n  post: async (request: SignInRequest): Promise<MockResponse> => {\n    const response: SignInResponse = {\n      user: {\n        name: 'テスト太郎',\n        email: request.data.email,\n        password: request.data.password\n      },\n      accessToken: 'hogehoge'\n    }\n    return [200, response]\n  }\n}\n\nexport default signIn","import axios from 'axios'\nimport mock from '../mocks/$mock'\n\nconst mocked = process.env.REACT_APP_MOCKED\n\nconst API_URL = 'http://localhost:4000'\n\nconst client = axios.create({\n  baseURL: API_URL,\n  timeout: 15000,\n})\n\nif (mocked === 'true') mock(client)\n\nexport { client }\n","import { client } from 'features/api'\nimport { SignInRequest, SignInResponse, SignUpRequest, SignUpResponse } from 'types/auth';\n\nexport const api = {\n  signIn: (request: SignInRequest) => client.post<SignInResponse>('/auth/sign-in/', request.data),\n  signUp: (request: SignUpRequest) => client.post<SignUpResponse>('/auth/sign-up', request.data)\n}\n","import { User, AuthLoading, AuthState } from './state'\n\nexport const initialUser: User = {\n    name: '',\n    email: '',\n    password: ''\n}\n\nexport const initialLoading: AuthLoading = {\n    post: {\n        signIn: false,\n        signUp: false\n    }\n}\n\nexport const initialState: AuthState = {\n    user: initialUser,\n    accessToken: '',\n    loading: initialLoading\n};\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { SignInRequest, SignInResponse, SignUpRequest, SignUpResponse } from 'types/auth';\nimport { api } from './authAPI'\nimport { initialState } from './initial'\n\nexport const signInAsync = createAsyncThunk<\n  SignInResponse,\n  SignInRequest,\n  { rejectValue: { errorMessage: string } }\n>(\n  'auth/signIn',\n  async (data, thunkApi) => {\n    const response = await api.signIn(data)\n      .then((res) => {\n        return res.data\n      }).catch(e => {\n        return thunkApi.rejectWithValue({ errorMessage: 'Auth Error: Sign In' })\n      })\n    return response\n  }\n);\n\nexport const signUpAsync = createAsyncThunk<\n  SignUpResponse,\n  SignUpRequest,\n  { rejectValue: { errorMessage: string } }\n>(\n  'auth/signUp',\n  async (data, thunkApi) => {\n    const response = await api.signUp(data)\n      .then((res) => {\n        return res.data\n      }).catch(e => {\n        return thunkApi.rejectWithValue({ errorMessage: 'Auth Error: Sign Up' })\n      })\n    return response\n  }\n)\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(signInAsync.pending, (state) => {\n        state.loading.post.signIn = true\n      })\n      .addCase(signInAsync.fulfilled, (state, action) => {\n        state.loading.post.signIn = false\n        state.user = action.payload.user\n        state.accessToken = action.payload.accessToken\n      })\n      .addCase(signInAsync.rejected, (state, action) => {\n        state.loading.post.signIn = false\n        console.log(action.payload?.errorMessage)\n      })\n      .addCase(signUpAsync.pending, (state) => {\n        state.loading.post.signUp = true\n      })\n      .addCase(signUpAsync.fulfilled, (state, action) => {\n        state.loading.post.signUp = false\n        state.user = action.payload.user\n        state.accessToken = action.payload.accessToken\n\n      })\n      .addCase(signUpAsync.rejected, (state, action) => {\n        state.loading.post.signUp = false\n        console.log(action.payload?.errorMessage)\n      });\n  },\n});\n\nexport default authSlice.reducer;","import Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { useForm, SubmitHandler } from \"react-hook-form\";\nimport { Link } from 'react-router-dom';\nimport { SignInForm } from 'types/auth';\nimport { useAppDispatch } from 'app/hooks';\nimport { signInAsync } from 'features/auth/authSlice'\n\nconst theme = createTheme();\n\nexport const SignIn: React.FC = () => {\n\n  const dispatch = useAppDispatch()\n  const { register, handleSubmit } = useForm<SignInForm>();\n  const onSubmit: SubmitHandler<SignInForm> = data => dispatch(signInAsync({ data }));\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <Box component=\"form\" onSubmit={handleSubmit(onSubmit)} noValidate sx={{ mt: 1 }}>\n            <TextField\n              margin=\"normal\"\n              label=\"email\"\n              fullWidth\n              autoComplete=\"email\"\n              autoFocus\n              {...register('email', {\n                required: true\n              })}\n            />\n            <TextField\n              margin=\"normal\"\n              label=\"password\"\n              fullWidth\n              type=\"password\"\n              autoComplete=\"current-password\"\n              {...register('password', {\n                required: true\n              })}\n            />\n            <FormControlLabel\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\n              label=\"Remember me\"\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Sign In\n            </Button>\n            <Grid container>\n              <Grid item xs>\n                <Link to='#'>\n                  Forgot password?\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link to='/sign-up/'>\n                  Don't have an account? Sign Up\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider >\n  );\n}\n\n","import Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { useForm, SubmitHandler } from \"react-hook-form\";\nimport { Link } from 'react-router-dom'\nimport { SignUpForm } from 'types/auth'\nimport { useAppDispatch } from 'app/hooks';\nimport { signUpAsync } from 'features/auth/authSlice';\n\nconst theme = createTheme();\n\nexport const SignUp: React.FC = () => {\n\n  const dispatch = useAppDispatch()\n  const { register, handleSubmit } = useForm<SignUpForm>()\n  const onSubmit: SubmitHandler<SignUpForm> = data => dispatch(signUpAsync({ data }))\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign up\n          </Typography>\n          <Box component=\"form\" noValidate onSubmit={handleSubmit(onSubmit)} sx={{ mt: 3 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"name\"\n                  autoComplete=\"name\"\n                  {...register('name', { required: true })}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"email\"\n                  autoComplete=\"email\"\n                  {...register('email', { required: true })}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  type=\"password\"\n                  label=\"password\"\n                  autoComplete=\"new-password\"\n                  {...register('password', { required: true })}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\n                  label=\"I want to receive inspiration, marketing promotions and updates via email.\"\n                />\n              </Grid>\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Sign Up\n            </Button>\n            <Grid container justifyContent=\"flex-end\">\n              <Grid item>\n                <Link to='/'>\n                  Already have an account? Sign in\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n}","import { Route, Routes, BrowserRouter } from 'react-router-dom'\nimport { SignIn } from 'pages/signIn'\nimport { SignUp } from 'pages/signUp/SignUp'\nimport { useAppSelector } from 'app/hooks'\n\nexport const AppRouter: React.VFC = () => {\n  const hasAccessToken = useAppSelector((state) => state.auth.accessToken)\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      {hasAccessToken ? (\n        <Routes>\n          <Route path=\"/\" element={<>Welcom to my app</>} />\n          <Route path=\"/board\" element={<>board</>} />\n          <Route path=\"/task\" element={<>task</>} />\n        </Routes>\n      ) : (\n        <Routes>\n          <Route path=\"/\" element={<SignIn />} />\n          <Route path=\"/sign-up/\" element={<SignUp />} />\n        </Routes>\n      )}\n    </BrowserRouter>\n  )\n}\n","import { AppRouter } from 'router';\n\nfunction App() {\n  return <AppRouter />;\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport authReducer from 'features/auth/authSlice'\n\nexport const store = configureStore({\n  reducer: {\n    auth: authReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}