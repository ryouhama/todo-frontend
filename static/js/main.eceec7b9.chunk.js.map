{"version":3,"sources":["mocks/$mock.ts","app/hooks.ts","mocks/auth/sign-in.ts","features/api.ts","features/auth/authAPI.ts","features/auth/initial.ts","features/auth/authSlice.tsx","pages/signIn/SignIn.tsx","pages/signUp/SignUp.tsx","App.tsx","app/store.ts","index.tsx"],"names":["client","useSelector","signIn","post","request","a","response","user","name","email","data","password","accessToken","console","log","axios","create","baseURL","timeout","mockServer","path","methods","mock0","api","initialState","accessKey","loading","signInAsync","createAsyncThunk","thunkApi","then","res","catch","e","rejectWithValue","errorMessage","authSlice","createSlice","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","theme","createTheme","SignIn","dispatch","useDispatch","useForm","register","handleSubmit","ThemeProvider","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Typography","variant","onSubmit","noValidate","mt","TextField","margin","label","fullWidth","autoComplete","autoFocus","required","type","FormControlLabel","control","Checkbox","value","color","Button","mb","Grid","container","item","xs","to","SignUp","spacing","sm","justifyContent","App","basename","process","element","store","configureStore","reducer","auth","authReducer","ReactDOM","render","document","getElementById"],"mappings":"yGAKgBA,E,qKCA+CC,I,kECahDC,EAfa,CAC1BC,KAAK,WAAD,4BAAE,WAAOC,GAAP,eAAAC,EAAA,6DACEC,EAA2B,CAC/BC,KAAM,CACJC,KAAM,iCACNC,MAAOL,EAAQM,KAAKD,MACpBE,SAAUP,EAAQM,KAAKC,UAEzBC,YAAa,YAEfC,QAAQC,IAAI,WAAYR,GATpB,kBAUG,CAAC,IAAKA,IAVT,2CAAF,mDAAC,ICGDN,EAASe,IAAMC,OAAO,CACxBC,QAHY,wBAIZC,QAAS,OHJGlB,EGQYA,EHRemB,IAAW,CACpD,CACEC,KAAM,gBACNC,QAASC,IAEVtB,EAAQ,IIPJ,IAAMuB,EACH,SAACnB,GAAD,OAA4BJ,EAAOG,KAAqB,iBAAkBC,EAAQM,OCU/Ec,EAA0B,CACnCjB,KAb6B,CAC7BC,KAAM,GACNC,MAAO,GACPE,SAAU,IAWVc,UAAW,GACXC,QATuC,CACvCvB,KAAM,CACFD,QAAQ,KCLHyB,EAAcC,YAKzB,cALyC,uCAMzC,WAAOlB,EAAMmB,GAAb,eAAAxB,EAAA,sEACyBkB,EAAWb,GAC/BoB,MAAK,SAACC,GACL,OAAOA,EAAIrB,QACVsB,OAAM,SAAAC,GACP,OAAOJ,EAASK,gBAAgB,CAAEC,aAAc,kBALtD,cACQ7B,EADR,yBAOSA,GAPT,2CANyC,yDAsC5B8B,EArBUC,YAAY,CACnC7B,KAAM,OACNgB,eACAc,SAAU,GACVC,cAAe,SAACC,GACdA,EACGC,QAAQd,EAAYe,SAAS,SAACC,GAC7BA,EAAMjB,QAAQvB,KAAKD,QAAS,KAE7BuC,QAAQd,EAAYiB,WAAW,SAACD,EAAOE,GACtCF,EAAMjB,QAAQvB,KAAKD,QAAS,EAC5ByC,EAAMpC,KAAOsC,EAAOC,QAAQvC,KAC5BoC,EAAMlB,UAAYoB,EAAOC,QAAQlC,eAElC6B,QAAQd,EAAYoB,UAAU,SAACJ,EAAOE,GAAY,IAAD,EAChDF,EAAMjB,QAAQvB,KAAKD,QAAS,EAC5BW,QAAQC,IAAR,UAAY+B,EAAOC,eAAnB,aAAY,EAAgBX,oBAKpC,Q,OC3BMa,EAAQC,cAEDC,EAAmB,WAE9B,IAAMC,ENhB4BC,cMcE,EAGDC,cAA3BC,EAH4B,EAG5BA,SAAUC,EAHkB,EAGlBA,aAGlB,OACE,cAACC,EAAA,EAAD,CAAeR,MAAOA,EAAtB,SACE,eAACS,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAArC,UACE,cAACC,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,CACEC,GAAI,CACFC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,UALhB,UAQE,cAACC,EAAA,EAAD,CAAYT,UAAU,KAAKU,QAAQ,KAAnC,qBAGA,eAACP,EAAA,EAAD,CAAKH,UAAU,OAAOW,SAAUd,GAjBI,SAAA7C,GAAI,OAAIyC,EAASxB,EAAY,CAAEjB,aAiBX4D,YAAU,EAACR,GAAI,CAAES,GAAI,GAA7E,UACE,cAACC,EAAA,EAAD,aACEC,OAAO,SACPC,MAAM,QACNC,WAAS,EACTC,aAAa,QACbC,WAAS,GACLvB,EAAS,QAAS,CACpBwB,UAAU,MAGd,cAACN,EAAA,EAAD,aACEC,OAAO,SACPC,MAAM,WACNC,WAAS,EACTI,KAAK,WACLH,aAAa,oBACTtB,EAAS,WAAY,CACvBwB,UAAU,MAGd,cAACE,EAAA,EAAD,CACEC,QAAS,cAACC,EAAA,EAAD,CAAUC,MAAM,WAAWC,MAAM,YAC1CV,MAAM,gBAER,cAACW,EAAA,EAAD,CACEN,KAAK,SACLJ,WAAS,EACTP,QAAQ,YACRN,GAAI,CAAES,GAAI,EAAGe,GAAI,GAJnB,qBAQA,eAACC,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAAb,SACE,cAAC,IAAD,CAAMC,GAAG,IAAT,gCAIF,cAACJ,EAAA,EAAD,CAAME,MAAI,EAAV,SACE,cAAC,IAAD,CAAME,GAAG,YAAT,6DClEV3C,EAAQC,cASD2C,EAAmB,WAAO,IAAD,EAEDvC,cAA3BC,EAF4B,EAE5BA,SAAUC,EAFkB,EAElBA,aAGlB,OACE,cAACC,EAAA,EAAD,CAAeR,MAAOA,EAAtB,SACE,eAACS,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAArC,UACE,cAACC,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,CACEC,GAAI,CACFC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,UALhB,UAQE,cAACC,EAAA,EAAD,CAAYT,UAAU,KAAKU,QAAQ,KAAnC,qBAGA,eAACP,EAAA,EAAD,CAAKH,UAAU,OAAOY,YAAU,EAACD,SAAUd,GAjBX,SAAA7C,GAAI,OAAIG,QAAQC,IAAIJ,MAiBeoD,GAAI,CAAES,GAAI,GAA7E,UACE,eAACgB,EAAA,EAAD,CAAMC,WAAS,EAACK,QAAS,EAAzB,UACE,cAACN,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAII,GAAI,EAAvB,SACE,cAACtB,EAAA,EAAD,aACEI,aAAa,aACbF,MAAM,aACNC,WAAS,EACTE,WAAS,GACLvB,EAAS,YAAa,CAAEwB,UAAU,QAG1C,cAACS,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAII,GAAI,EAAvB,SACE,cAACtB,EAAA,EAAD,aACEG,WAAS,EACTD,MAAM,YACNE,aAAa,eACTtB,EAAS,WAAY,CAAEwB,UAAU,QAGzC,cAACS,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAAClB,EAAA,EAAD,aACEG,WAAS,EACTD,MAAM,QACNE,aAAa,SACTtB,EAAS,QAAS,CAAEwB,UAAU,QAGtC,cAACS,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAAClB,EAAA,EAAD,aACEG,WAAS,EACTI,KAAK,WACLL,MAAM,WACNE,aAAa,gBACTtB,EAAS,WAAY,CAAEwB,UAAU,QAGzC,cAACS,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACV,EAAA,EAAD,CACEC,QAAS,cAACC,EAAA,EAAD,CAAUC,MAAM,mBAAmBC,MAAM,YAClDV,MAAM,oFAIZ,cAACW,EAAA,EAAD,CACEN,KAAK,SACLJ,WAAS,EACTP,QAAQ,YACRN,GAAI,CAAES,GAAI,EAAGe,GAAI,GAJnB,qBAQA,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACO,eAAe,WAA/B,SACE,cAACR,EAAA,EAAD,CAAME,MAAI,EAAV,SACE,cAAC,IAAD,CAAME,GAAG,YAAT,8DChFDK,MAXf,WACE,OACE,cAAC,IAAD,CAAeC,SAAUC,iBAAzB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO9E,KAAK,YAAY+E,QAAS,cAAC,EAAD,MACjC,cAAC,IAAD,CAAO/E,KAAK,YAAY+E,QAAS,cAAC,EAAD,YCN5BC,EAAQC,YAAe,CAClCC,QAAS,CACPC,KAAMC,KCCVC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,W","file":"static/js/main.eceec7b9.chunk.js","sourcesContent":["/* eslint-disable */\nimport { AxiosInstance } from 'axios'\nimport mockServer from 'axios-mock-server'\nimport mock0 from './auth/sign-in'\n\nexport default (client?: AxiosInstance) => mockServer([\n  {\n    path: '/auth/sign-in',\n    methods: mock0\n  }\n], client, '')\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { MockMethods, MockResponse } from 'axios-mock-server';\nimport { SignInRequest, SignInResponse } from 'types/auth'\n\nconst signIn: MockMethods = {\n  post: async (request: SignInRequest): Promise<MockResponse> => {\n    const response: SignInResponse = {\n      user: {\n        name: 'テスト太郎',\n        email: request.data.email,\n        password: request.data.password\n      },\n      accessToken: 'hogehoge'\n    }\n    console.log('response', response)\n    return [200, response]\n  }\n}\n\nexport default signIn","import axios from 'axios'\nimport mock from '../mocks/$mock'\n\nconst mocked = process.env.REACT_APP_MOCKED\n\nconst API_URL = 'http://localhost:4000'\n\nconst client = axios.create({\n    baseURL: API_URL,\n    timeout: 15000\n})\n\n\nif (mocked === 'true') mock(client)\n\nexport { client }\n","import { client } from 'features/api'\nimport { SignInRequest, SignInResponse } from 'types/auth';\n\nexport const api = {\n  signIn: (request: SignInRequest) => client.post<SignInResponse>('/auth/sign-in/', request.data)\n}\n","import { User, AuthLoading, AuthState } from './state'\n\nexport const initialUser: User = {\n    name: '',\n    email: '',\n    password: ''\n}\n\nexport const initialLoading: AuthLoading = {\n    post: {\n        signIn: false\n    }\n}\n\nexport const initialState: AuthState = {\n    user: initialUser,\n    accessKey: '',\n    loading: initialLoading\n};\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { SignInRequest, SignInResponse } from 'types/auth';\nimport { api } from './authAPI'\nimport { initialState } from './initial'\n\nexport const signInAsync = createAsyncThunk<\n  SignInResponse,\n  SignInRequest,\n  { rejectValue: { errorMessage: string } }\n>(\n  'auth/signIn',\n  async (data, thunkApi) => {\n    const response = await api.signIn(data)\n      .then((res) => {\n        return res.data\n      }).catch(e => {\n        return thunkApi.rejectWithValue({ errorMessage: 'Auth Error' })\n      })\n    return response\n  }\n);\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(signInAsync.pending, (state) => {\n        state.loading.post.signIn = true\n      })\n      .addCase(signInAsync.fulfilled, (state, action) => {\n        state.loading.post.signIn = false\n        state.user = action.payload.user\n        state.accessKey = action.payload.accessToken\n      })\n      .addCase(signInAsync.rejected, (state, action) => {\n        state.loading.post.signIn = false\n        console.log(action.payload?.errorMessage)\n      });\n  },\n});\n\nexport default authSlice.reducer;","import Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { useForm, SubmitHandler } from \"react-hook-form\";\nimport { Link } from 'react-router-dom';\nimport { SignInForm } from 'types/auth';\nimport { useAppDispatch } from 'app/hooks';\nimport { signInAsync } from 'features/auth/authSlice'\n\nconst theme = createTheme();\n\nexport const SignIn: React.FC = () => {\n\n  const dispatch = useAppDispatch()\n  const { register, handleSubmit } = useForm<SignInForm>();\n  const onSubmit: SubmitHandler<SignInForm> = data => dispatch(signInAsync({ data }));\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <Box component=\"form\" onSubmit={handleSubmit(onSubmit)} noValidate sx={{ mt: 1 }}>\n            <TextField\n              margin=\"normal\"\n              label=\"email\"\n              fullWidth\n              autoComplete=\"email\"\n              autoFocus\n              {...register('email', {\n                required: true\n              })}\n            />\n            <TextField\n              margin=\"normal\"\n              label=\"password\"\n              fullWidth\n              type=\"password\"\n              autoComplete=\"current-password\"\n              {...register('password', {\n                required: true\n              })}\n            />\n            <FormControlLabel\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\n              label=\"Remember me\"\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Sign In\n            </Button>\n            <Grid container>\n              <Grid item xs>\n                <Link to='#'>\n                  Forgot password?\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link to='/sign-up/'>\n                  Don't have an account? Sign Up\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider >\n  );\n}\n\n","import Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { useForm, SubmitHandler } from \"react-hook-form\";\nimport { Link } from 'react-router-dom'\n\nconst theme = createTheme();\n\ntype Inputs = {\n  firstName: string,\n  lastName: string,\n  email: string,\n  password: string\n}\n\nexport const SignUp: React.FC = () => {\n\n  const { register, handleSubmit } = useForm<Inputs>();\n  const onSubmit: SubmitHandler<Inputs> = data => console.log(data);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign up\n          </Typography>\n          <Box component=\"form\" noValidate onSubmit={handleSubmit(onSubmit)} sx={{ mt: 3 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  autoComplete=\"given-name\"\n                  label=\"first name\"\n                  fullWidth\n                  autoFocus\n                  {...register('firstName', { required: true })}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"last name\"\n                  autoComplete=\"family-name\"\n                  {...register('lastName', { required: true })}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"email\"\n                  autoComplete=\"email\"\n                  {...register('email', { required: true })}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  type=\"password\"\n                  label=\"password\"\n                  autoComplete=\"new-password\"\n                  {...register('password', { required: true })}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\n                  label=\"I want to receive inspiration, marketing promotions and updates via email.\"\n                />\n              </Grid>\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Sign Up\n            </Button>\n            <Grid container justifyContent=\"flex-end\">\n              <Grid item>\n                <Link to='/sign-in/'>\n                  Already have an account? Sign in\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n}","import { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport { SignIn } from 'pages/signIn'\nimport { SignUp } from 'pages/signUp/SignUp';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Routes>\n        <Route path=\"/sign-in/\" element={<SignIn />} />\n        <Route path=\"/sign-up/\" element={<SignUp />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport authReducer from 'features/auth/authSlice'\n\nexport const store = configureStore({\n  reducer: {\n    auth: authReducer\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}