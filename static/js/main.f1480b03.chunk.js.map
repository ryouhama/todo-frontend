{"version":3,"sources":["app/hooks.ts","router/storage.ts","features/api.ts","features/auth/authAPI.ts","features/auth/initialState.ts","features/auth/authSlice.tsx","pages/signIn/SignIn.tsx","pages/signUp/SignUp.tsx","components/layout/AppLayout.tsx","components/layout/MainLayout.tsx","components/bar/HeaderBar.tsx","components/layout/consts.ts","components/bar/SideBar.tsx","components/layout/PageLayout.tsx","features/dashboard/dashboardAPI.ts","features/dashboard/initialState.ts","features/dashboard/dashboardSlice.tsx","pages/dsshBoad/presenter.tsx","pages/dsshBoad/container.tsx","router/route.tsx","app/store.ts","mocks/dashboard/_dashboardId/cardList/_cardListId/cards.ts","mocks/dashboard/_dashboardId/cardList.ts","mocks/dashboard.ts","mocks/auth/sign-up.ts","mocks/auth/sign-in.ts","mocks/setup.ts","mocks/$mock.ts","App.tsx","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","setAccessToken","storage","localStorage","setItem","accessToken","hasAccessToken","Boolean","getItem","Error","getAccessToken","error","client","axios","create","baseURL","timeout","api","request","post","data","initialState","user","id","name","email","loading","signIn","signUp","redirectToHome","window","location","href","signInAsync","createAsyncThunk","thunkApi","a","then","res","catch","e","rejectWithValue","errorMessage","response","signUpAsync","authReducer","createSlice","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer","theme","createTheme","SignIn","dispatch","useForm","register","handleSubmit","ThemeProvider","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Typography","variant","onSubmit","noValidate","mt","TextField","margin","label","fullWidth","autoComplete","autoFocus","required","type","FormControlLabel","control","Checkbox","value","color","Button","mb","Grid","container","item","xs","to","SignUp","spacing","justifyContent","AppLayout","props","children","mdTheme","height","MainLayout","backgroundColor","palette","mode","grey","flexGrow","overflow","Toolbar","AppBar","styled","MuiAppBar","shouldForwardProp","prop","open","zIndex","drawer","transition","transitions","easing","sharp","duration","leavingScreen","marginLeft","width","enteringScreen","HeaderBar","toggle","boardName","position","pr","IconButton","edge","aria-label","onClick","marginRight","noWrap","Drawer","MuiDrawer","whiteSpace","boxSizing","overflowX","breakpoints","up","SideBar","px","Divider","List","PageLayout","dashboard","useState","setOpen","prev","dashboardTittle","tittle","ListItem","button","ListItemIcon","ListItemText","primary","dashboardId","cardListId","cardLists","createCardList","createCard","createDashboardAsync","createCardAsync","createCardLstAsync","dashboardReducer","cardList","targetCardListIndex","findIndex","meta","arg","cards","card","Presenter","Dashboard","m","map","index","AddCardList","reset","Card","minWidth","p","placeholder","CardList","toggleButton","length","CardItem","Container","AppRouter","hasToken","basename","process","path","element","store","configureStore","combineReducers","auth","getState","maxId","Math","max","it","createDashboard","setupMock","mockServer","methods","mock0","mock1","mock2","mock3","mock4","App","setUp","ReactDOM","render","document","getElementById"],"mappings":"4QAIaA,EAAiB,kBAAMC,eACvBC,EAAkDC,I,iCCHlDC,EAAiB,SAACC,GAC7BC,aAAaC,QAAQ,cAAeF,EAAQG,cASjCC,EAAiB,WAC5B,IACE,OAAOC,QARmB,WAC5B,IAAMF,EAAcF,aAAaK,QAAQ,eACzC,IAAKH,EAAa,MAAMI,MAAM,0BAC9B,OAAOJ,EAKUK,IACf,MAAOC,GACP,OAAO,I,QCZEC,E,OAASC,EAAMC,OAAO,CACjCC,QAHkB,wBAIlBC,QAAS,OCEEC,EACH,SAACC,GAAD,OACNN,EAAOO,KAAqB,iBAAkBD,EAAQE,OAF7CH,EAGH,SAACC,GAAD,OACNN,EAAOO,KAAqB,iBAAkBD,EAAQE,OCI7CC,EAA0B,CACrCC,KAdgC,CAChCC,IAAK,EACLC,KAAM,GACNC,MAAO,IAYPC,QATyC,CACzCP,KAAM,CACJQ,QAAQ,EACRC,QAAQ,KCDCC,EAAiB,WAC5BC,OAAOC,SAASC,KAAO,6BAGZC,EAAcC,YAIzB,cAJyC,uCAI1B,WAAOd,EAAMe,GAAb,eAAAC,EAAA,sEACQnB,EACbG,GACPiB,MAAK,SAACC,GACL,OAAOA,EAAIlB,QAEZmB,OAAM,SAACC,GACN,OAAOL,EAASM,gBAAgB,CAAEC,aAAc,2BAPrC,cACTC,EADS,yBASRA,GATQ,2CAJ0B,yDAgB9BC,EAAcV,YAIzB,cAJyC,uCAI1B,WAAOd,EAAMe,GAAb,eAAAC,EAAA,sEACQnB,EACbG,GACPiB,MAAK,SAACC,GACL,OAAOA,EAAIlB,QAEZmB,OAAM,SAACC,GACN,OAAOL,EAASM,gBAAgB,CAAEC,aAAc,2BAPrC,cACTC,EADS,yBASRA,GATQ,2CAJ0B,yDAiD9BE,EAjCYC,YAAY,CACnCtB,KAAM,OACNH,eACA0B,SAAU,GACVC,cAAe,SAACC,GACdA,EACGC,QAAQjB,EAAYkB,SAAS,SAACC,GAC7BA,EAAM1B,QAAQP,KAAKQ,QAAS,KAE7BuB,QAAQjB,EAAYoB,WAAW,SAACD,EAAOE,GACtCF,EAAM1B,QAAQP,KAAKQ,QAAS,EAC5ByB,EAAM9B,KAAOgC,EAAOC,QAAQjC,KAC5BrB,EAAe,CAAEI,YAAaiD,EAAOC,QAAQlD,cAC7CwB,OAEDqB,QAAQjB,EAAYuB,UAAU,SAACJ,GAC9BA,EAAM1B,QAAQP,KAAKQ,QAAS,KAE7BuB,QAAQN,EAAYO,SAAS,SAACC,GAC7BA,EAAM1B,QAAQP,KAAKS,QAAS,KAE7BsB,QAAQN,EAAYS,WAAW,SAACD,EAAOE,GACtCF,EAAM1B,QAAQP,KAAKS,QAAS,EAC5BwB,EAAM9B,KAAOgC,EAAOC,QAAQjC,KAC5BrB,EAAe,CAAEI,YAAaiD,EAAOC,QAAQlD,cAC7CwB,OAEDqB,QAAQN,EAAYY,UAAU,SAACJ,GAC9BA,EAAM1B,QAAQP,KAAKS,QAAS,QAKC6B,Q,OChE/BC,EAAQC,cAEDC,EAAmB,WAC9B,IAAMC,EAAWhE,IADmB,EAEDiE,cAA3BC,EAF4B,EAE5BA,SAAUC,EAFkB,EAElBA,aAIlB,OACE,cAACC,EAAA,EAAD,CAAeP,MAAOA,EAAtB,SACE,eAAC,IAAD,CAAWQ,UAAU,OAAOC,SAAS,KAArC,UACE,cAACC,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,CACEC,GAAI,CACFC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,UALhB,UAQE,cAACC,EAAA,EAAD,CAAYT,UAAU,KAAKU,QAAQ,KAAnC,qBAGA,eAACP,EAAA,EAAD,CACEH,UAAU,OACVW,SAAUb,GApBwB,SAAC5C,GAAD,OAC1CyC,EAAS5B,EAAY,CAAEb,aAoBf0D,YAAU,EACVR,GAAI,CAAES,GAAI,GAJZ,UAME,cAACC,EAAA,EAAD,aACEC,OAAO,SACPC,MAAM,QACNC,WAAS,EACTC,aAAa,QACbC,WAAS,GACLtB,EAAS,QAAS,CACpBuB,UAAU,MAGd,cAACN,EAAA,EAAD,aACEC,OAAO,SACPC,MAAM,WACNC,WAAS,EACTI,KAAK,WACLH,aAAa,oBACTrB,EAAS,WAAY,CACvBuB,UAAU,MAGd,cAACE,EAAA,EAAD,CACEC,QAAS,cAACC,EAAA,EAAD,CAAUC,MAAM,WAAWC,MAAM,YAC1CV,MAAM,gBAER,cAACW,EAAA,EAAD,CACEN,KAAK,SACLJ,WAAS,EACTP,QAAQ,YACRN,GAAI,CAAES,GAAI,EAAGe,GAAI,GAJnB,qBAQA,eAACC,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAAb,SACE,cAAC,IAAD,CAAMC,GAAG,IAAT,gCAEF,cAACJ,EAAA,EAAD,CAAME,MAAI,EAAV,SACE,cAAC,IAAD,CAAME,GAAG,YAAT,6DClEVzC,EAAQC,cAEDyC,EAAmB,WAC9B,IAAMvC,EAAWhE,IADmB,EAEDiE,cAA3BC,EAF4B,EAE5BA,SAAUC,EAFkB,EAElBA,aAIlB,OACE,cAACC,EAAA,EAAD,CAAeP,MAAOA,EAAtB,SACE,eAAC,IAAD,CAAWQ,UAAU,OAAOC,SAAS,KAArC,UACE,cAACC,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,CACEC,GAAI,CACFC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,UALhB,UAQE,cAACC,EAAA,EAAD,CAAYT,UAAU,KAAKU,QAAQ,KAAnC,qBAGA,eAACP,EAAA,EAAD,CACEH,UAAU,OACVY,YAAU,EACVD,SAAUb,GArBwB,SAAC5C,GAAD,OAC1CyC,EAASjB,EAAY,CAAExB,aAqBfkD,GAAI,CAAES,GAAI,GAJZ,UAME,eAACgB,EAAA,EAAD,CAAMC,WAAS,EAACK,QAAS,EAAzB,UACE,cAACN,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAAClB,EAAA,EAAD,aACEG,WAAS,EACTD,MAAM,OACNE,aAAa,QACTrB,EAAS,OAAQ,CAAEuB,UAAU,QAGrC,cAACS,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAAClB,EAAA,EAAD,aACEG,WAAS,EACTD,MAAM,QACNE,aAAa,SACTrB,EAAS,QAAS,CAAEuB,UAAU,QAGtC,cAACS,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAAClB,EAAA,EAAD,aACEG,WAAS,EACTI,KAAK,WACLL,MAAM,WACNE,aAAa,gBACTrB,EAAS,WAAY,CAAEuB,UAAU,QAGzC,cAACS,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACV,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CAAUC,MAAM,mBAAmBC,MAAM,YAE3CV,MAAM,oFAIZ,cAACW,EAAA,EAAD,CACEN,KAAK,SACLJ,WAAS,EACTP,QAAQ,YACRN,GAAI,CAAES,GAAI,EAAGe,GAAI,GAJnB,qBAQA,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACM,eAAe,WAA/B,SACE,cAACP,EAAA,EAAD,CAAME,MAAI,EAAV,SACE,cAAC,IAAD,CAAME,GAAG,IAAT,8D,QCtFHI,EAAsB,SAACC,GAAW,IACrCC,EAAaD,EAAbC,SAEFC,EAAU/C,cAEhB,OACE,cAACM,EAAA,EAAD,CAAeP,MAAOgD,EAAtB,SACE,eAACrC,EAAA,EAAD,CAAKsC,OAAQ,OAAQrC,GAAI,CAAEE,QAAS,QAApC,UACE,cAACJ,EAAA,EAAD,IACCqC,Q,SCVIG,EAAuB,SAACJ,GAAW,IACtCC,EAAaD,EAAbC,SAER,OACE,eAACpC,EAAA,EAAD,CACEH,UAAU,OACVI,GAAI,CACFuC,gBAAiB,SAACnD,GAAD,MACQ,UAAvBA,EAAMoD,QAAQC,KACVrD,EAAMoD,QAAQE,KAAK,KACnBtD,EAAMoD,QAAQE,KAAK,MACzBC,SAAU,EACVN,OAAQ,QACRO,SAAU,QATd,UAYE,cAACC,EAAA,EAAD,IACCV,M,sICRDW,GAASC,aAAOC,KAAW,CAC/BC,kBAAmB,SAACC,GAAD,MAAmB,SAATA,IADhBH,EAEC,gBAAG3D,EAAH,EAAGA,MAAO+D,EAAV,EAAUA,KAAV,oBACdC,OAAQhE,EAAMgE,OAAOC,OAAS,EAC9BC,WAAYlE,EAAMmE,YAAY/G,OAAO,CAAC,QAAS,UAAW,CACxDgH,OAAQpE,EAAMmE,YAAYC,OAAOC,MACjCC,SAAUtE,EAAMmE,YAAYG,SAASC,iBAEnCR,GAAQ,CACVS,WCrBwB,IDsBxBC,MAAM,eAAD,OCtBmB,IDsBnB,OACLP,WAAYlE,EAAMmE,YAAY/G,OAAO,CAAC,QAAS,UAAW,CACxDgH,OAAQpE,EAAMmE,YAAYC,OAAOC,MACjCC,SAAUtE,EAAMmE,YAAYG,SAASI,sBAW9BC,GAAsC,SAAC7B,GAAW,IACrDiB,EAA4BjB,EAA5BiB,KAAMa,EAAsB9B,EAAtB8B,OAAQC,EAAc/B,EAAd+B,UAEtB,OACE,cAAC,GAAD,CAAQC,SAAS,WAAWf,KAAMA,EAAlC,SACE,eAACN,EAAA,EAAD,CACE7C,GAAI,CACFmE,GAAI,QAFR,UAKE,cAACC,GAAA,EAAD,CACEC,KAAK,QACL/C,MAAM,UACNgD,aAAW,cACXC,QAASP,EACThE,GAAE,aACAwE,YAAa,QACTrB,GAAQ,CAAEjD,QAAS,SAP3B,SAUE,cAAC,KAAD,MAEF,cAACG,EAAA,EAAD,CACET,UAAU,KACVU,QAAQ,KACRgB,MAAM,UACNmD,QAAM,EACNzE,GAAI,CAAE2C,SAAU,GALlB,SAOGsB,U,2DExDLS,GAAS3B,aAAO4B,KAAW,CAC/B1B,kBAAmB,SAACC,GAAD,MAAmB,SAATA,IADhBH,EAEI,gBAAG3D,EAAH,EAAGA,MAAO+D,EAAV,EAAUA,KAAV,MAAsB,CACvC,qBAAqB,aACnBe,SAAU,WACVU,WAAY,SACZf,MDfwB,ICgBxBP,WAAYlE,EAAMmE,YAAY/G,OAAO,QAAS,CAC5CgH,OAAQpE,EAAMmE,YAAYC,OAAOC,MACjCC,SAAUtE,EAAMmE,YAAYG,SAASI,iBAEvCe,UAAW,eACN1B,GAAD,cACF2B,UAAW,SACXxB,WAAYlE,EAAMmE,YAAY/G,OAAO,QAAS,CAC5CgH,OAAQpE,EAAMmE,YAAYC,OAAOC,MACjCC,SAAUtE,EAAMmE,YAAYG,SAASC,gBAEvCE,MAAOzE,EAAM2C,QAAQ,IACpB3C,EAAM2F,YAAYC,GAAG,MAAQ,CAC5BnB,MAAOzE,EAAM2C,QAAQ,UAWhBkD,GAAkC,SAAC/C,GAAW,IACjDiB,EAA2BjB,EAA3BiB,KAAMa,EAAqB9B,EAArB8B,OAAQ7B,EAAaD,EAAbC,SAEtB,OACE,eAAC,GAAD,CAAQ7B,QAAQ,YAAY6C,KAAMA,EAAlC,UACE,cAACN,EAAA,EAAD,CACE7C,GAAI,CACFE,QAAS,OACTE,WAAY,SACZ4B,eAAgB,WAChBkD,GAAI,CAAC,IALT,SAQE,cAACd,GAAA,EAAD,CAAYG,QAASP,EAArB,SACE,cAAC,KAAD,QAGJ,cAACmB,GAAA,EAAD,IACA,cAACC,GAAA,EAAD,UAAOjD,QC/CAkD,GAAuB,SAACnD,GAAW,IACtCC,EAAaD,EAAbC,SACFmD,EAAY7J,GAAe,SAACqD,GAAD,OAAWA,EAAMwG,UAAUA,aAFf,EAGrBC,oBAAS,GAHY,mBAGtCpC,EAHsC,KAGhCqC,EAHgC,KAIvCxB,EAAS,kBAAMwB,GAAQ,SAACC,GAAD,OAAWA,MAElCC,EAAkBJ,EAAUK,OAASL,EAAUK,OAAS,iCAE9D,OACE,eAAC,EAAD,WACE,cAAC,GAAD,CAAWxC,KAAMA,EAAMa,OAAQA,EAAQC,UAAWyB,IAClD,eAAC,GAAD,CAASvC,KAAMA,EAAMa,OAAQA,EAA7B,UACE,eAAC4B,EAAA,EAAD,CAAUC,QAAM,EAAhB,UACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,MAEF,cAACC,EAAA,EAAD,CAAcC,QAAQ,iBAExB,eAACJ,EAAA,EAAD,CAAUC,QAAM,EAAhB,UACE,cAACC,EAAA,EAAD,UACE,cAAC,KAAD,MAEF,cAACC,EAAA,EAAD,CAAcC,QAAQ,eAExB,eAACJ,EAAA,EAAD,CAAUC,QAAM,EAAhB,UACE,cAACC,EAAA,EAAD,UACE,cAAC,KAAD,MAEF,cAACC,EAAA,EAAD,CAAcC,QAAQ,mBAG1B,cAAC,EAAD,UAAa7D,Q,wCChCNxF,GACM,SAACC,GAAD,OACfN,EAAOO,KAA8B,cAAeD,EAAQE,OAFnDH,GAGI,SAACC,GAAD,OACbN,EAAOO,KAAP,qBACgBD,EAAQqJ,YADxB,cAEErJ,EAAQE,OANDH,GAQC,SAACC,GAAD,OACVN,EAAOO,KAAP,qBACgBD,EAAQqJ,YADxB,qBACgDrJ,EAAQsJ,WADxD,WAEEtJ,EAAQE,OCJDC,GAA+B,CAC1CuI,UAfwC,CACxCrI,IAAK,EACL0I,OAAQ,GACRQ,UAAW,IAaX/I,QAVuC,CACvCP,KAAM,CACJL,QAAQ,EACR4J,gBAAgB,EAChBC,YAAY,KCRHC,GAAuB1I,YAIlC,mBAJkD,uCAI9B,WAAOd,EAAMe,GAAb,eAAAC,EAAA,sEACGnB,GACJG,GAChBiB,MAAK,SAACC,GAAD,OAASA,EAAIlB,QAClBmB,OAAM,SAACC,GACN,OAAOL,EAASM,gBAAgB,CAC9BC,aAAc,8GANA,cACdC,EADc,yBASbA,GATa,2CAJ8B,yDAgBvCkI,GAAkB3I,YAI7B,uBAJ6C,uCAIrB,WAAOd,EAAMe,GAAb,eAAAC,EAAA,sEACDnB,GACTG,GACXiB,MAAK,SAACC,GAAD,OAASA,EAAIlB,QAClBmB,OAAM,SAACC,GACN,OAAOL,EAASM,gBAAgB,CAC9BC,aAAc,sFANI,cAClBC,EADkB,yBASjBA,GATiB,2CAJqB,yDAgBlCmI,GAAqB5I,YAIhC,2BAJgD,uCAIpB,WAAOd,EAAMe,GAAb,eAAAC,EAAA,sEACLnB,GACNG,GACdiB,MAAK,SAACC,GAAD,OAASA,EAAIlB,QAClBmB,OAAM,SAACC,GACN,OAAOL,EAASM,gBAAgB,CAC9BC,aAAc,wGANQ,cACtBC,EADsB,yBASrBA,GATqB,2CAJoB,yDAgErCoI,GAhDiBjI,YAAY,CACxCtB,KAAM,YACNH,gBACA0B,SAAU,GACVC,cAAe,SAACC,GACdA,EACGC,QAAQ0H,GAAqBzH,SAAS,SAACC,GACtCA,EAAM1B,QAAQP,KAAKL,QAAS,KAE7BoC,QAAQ0H,GAAqBvH,WAAW,SAACD,EAAOE,GAC/CF,EAAM1B,QAAQP,KAAKL,QAAS,EAC5BsC,EAAMwG,UAAYtG,EAAOC,QAAQqG,aAElC1G,QAAQ0H,GAAqBpH,UAAU,SAACJ,GACvCA,EAAM1B,QAAQP,KAAKL,QAAS,KAE7BoC,QAAQ4H,GAAmB3H,SAAS,SAACC,GACpCA,EAAM1B,QAAQP,KAAKuJ,gBAAiB,KAErCxH,QAAQ4H,GAAmBzH,WAAW,SAACD,EAAOE,GAC7CF,EAAM1B,QAAQP,KAAKuJ,gBAAiB,EACpCtH,EAAMwG,UAAUa,UAAhB,uBACKrH,EAAMwG,UAAUa,WADrB,CAEEnH,EAAOC,QAAQyH,cAGlB9H,QAAQ4H,GAAmBtH,UAAU,SAACJ,GACrCA,EAAM1B,QAAQP,KAAKuJ,gBAAiB,KAErCxH,QAAQ2H,GAAgB1H,SAAS,SAACC,GACjCA,EAAM1B,QAAQP,KAAKwJ,YAAa,KAEjCzH,QAAQ2H,GAAgBxH,WAAW,SAACD,EAAOE,GAC1CF,EAAM1B,QAAQP,KAAKwJ,YAAa,EAChC,IAAMM,EAAsB7H,EAAMwG,UAAUa,UAAUS,WACpD,SAACF,GAAD,OAAcA,EAASzJ,KAAO+B,EAAO6H,KAAKC,IAAIZ,cAEhDpH,EAAMwG,UAAUa,UAAUQ,GAAqBI,MAA/C,uBACKjI,EAAMwG,UAAUa,UAAUQ,GAAqBI,OADpD,CAEE/H,EAAOC,QAAQ+H,UAGlBpI,QAAQ2H,GAAgBrH,UAAU,SAACJ,GAClCA,EAAM1B,QAAQP,KAAKwJ,YAAa,QAKOlH,QC9ElC8H,GAAsC,SAAC/E,GAAW,IACrDoD,EAAcpD,EAAdoD,UAER,OACE,cAAC,GAAD,UACE,cAAC,GAAD,CAAWa,UAAWb,EAAUa,eAShCe,GAAsC,SAAChF,GAAW,IAC9CiE,EAAcjE,EAAdiE,UAER,OACE,eAACpG,EAAA,EAAD,CACE6C,SAAS,OACT5C,GAAI,CACFE,QAAS,OACTC,cAAe,MACfgH,EAAG,EACH9E,OAAQ,KANZ,UASG8D,EAAUiB,KAAI,SAACV,EAAUW,GAAX,OACb,cAAC,GAAD,CAEEnK,KAAMwJ,EAASf,OACfO,WAAYQ,EAASzJ,GACrB8J,MAAOL,EAASK,OAJlB,mBACmBM,OAMrB,cAAC,GAAD,QAKAC,GAAyB,SAACpF,GAAW,IAAD,EACE1C,cAAlCC,EADgC,EAChCA,SAAU8H,EADsB,EACtBA,MAAO7H,EADe,EACfA,aADe,EAEhB6F,oBAAS,GAFO,mBAEjCpC,EAFiC,KAE3BqC,EAF2B,KAWlCjG,EAAWhE,IAOjB,OACE,cAACwE,EAAA,EAAD,CACEH,UAAU,OACVW,SAAUb,GATsC,SAAC5C,GACnDyC,EAASiH,GAAmB,CAAEP,YAAa,EAAGnJ,KAAMA,KACpD0I,GAAQ,GACR+B,OAOEvH,GAAI,CAAEE,QAAS,SAHjB,SAKE,eAACsH,GAAA,EAAD,CACExH,GAAI,CACFyH,SAxEc,IAyEdN,EAAG,EACHO,EAAG,EACHnF,gBAAiB,aAEnBgC,QA5BW,WAEVpB,GAAMqC,GAAQ,IAmBjB,iDAUGrC,GACC,qCACE,cAACzC,EAAA,EAAD,aACEC,OAAO,SACPgH,YAAY,wEACZ3H,GAAI,CAAEH,SAAU,KAChBgB,WAAS,EACTE,WAAS,GACLtB,EAAS,YAEf,cAAC2E,GAAA,EAAD,CAAYG,QArCJ,WAChBiB,GAAQ,GACR+B,KAmCQ,SACE,cAAC,KAAD,eAeRK,GAAoC,SAAC1F,GAAW,IAC5ChF,EAA4BgF,EAA5BhF,KAAMgJ,EAAsBhE,EAAtBgE,WAAYa,EAAU7E,EAAV6E,MADyB,EAE3BxB,oBAAS,GAFkB,mBAE5CpC,EAF4C,KAEtCqC,EAFsC,OAGThG,cAAlCC,EAH2C,EAG3CA,SAAU8H,EAHiC,EAGjCA,MAAO7H,EAH0B,EAG1BA,aAEnBH,EAAWhE,IAQXsM,EAAe,WACnBrC,GAAQ,SAACC,GAAD,OAAWA,KACnB8B,KAGF,OACE,cAACxH,EAAA,EAAD,CACEC,GAAI,CACFyH,SA/HgB,IAgIhBvH,QAAS,SAHb,SAME,eAACH,EAAA,EAAD,CACEH,UAAU,OACVW,SAAUb,GArBoC,SAAC5C,GACnDyC,EACEgH,GAAgB,CAAEN,YAAa,EAAGC,WAAYA,EAAYpJ,KAAMA,KAElE+K,OAkBI7H,GAAI,CACFE,QAAS,OACTE,WAAY,aACZD,cAAe,SACfoC,gBAAiB,UACjBmF,EAAG,EACHP,EAAG,GATP,UAYE,cAAC9G,EAAA,EAAD,UAAanD,IACZ6J,EAAMe,QAAU,GACff,EAAMK,KAAI,SAACJ,EAAMK,GAAP,OACR,cAAC,GAAD,CAAgCL,KAAMA,GAAtC,eAAuBK,OAE1BlE,GACC,cAACzC,EAAA,EAAD,aACEC,OAAO,SACPgH,YAAY,gDACZ9G,WAAS,EACTE,WAAS,GACLtB,EAAS,YAGjB,cAAC8B,EAAA,EAAD,CAAQvB,GAAI,CAAES,GAAI,GAAKH,QAAQ,WAAWiE,QAASsD,EAAnD,wDAYFE,GAAoC,SAAC7F,GAAW,IAC5C8E,EAAS9E,EAAT8E,KACR,OAAO,cAACQ,GAAA,EAAD,CAAMxH,GAAI,CAAES,GAAI,EAAGiH,EAAG,EAAG7D,MAAO,QAAhC,SAA2CmD,EAAKrB,UCzL5CqC,GAAsB,WACjC,IAAM1C,EAAY7J,GAAe,SAACqD,GAAD,OAAWA,EAAMwG,UAAUA,aAE5D,OAAO,cAAC,GAAD,CAAWA,UAAWA,KCAlB2C,GAAuB,WAClC,IAAMC,EAAWlM,IAEjB,OACE,cAAC,IAAD,CAAemM,SAAUC,iBAAzB,SACE,cAAC,IAAD,UACGF,EACC,qCACE,cAAC,IAAD,CAAOG,KAAK,cAAcC,QAAS,cAAC,GAAD,MACnC,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,IAAD,CAAUzG,GAAG,qBAGxC,qCACE,cAAC,IAAD,CAAOwG,KAAK,YAAYC,QAAS,cAAC,EAAD,MACjC,cAAC,IAAD,CAAOD,KAAK,YAAYC,QAAS,cAAC,EAAD,MACjC,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,IAAD,CAAUzG,GAAG,wB,8BCZrC0G,GAAQC,YAAe,CAClCrJ,QAASsJ,aAAgB,CACvBC,KAAMnK,EACN+G,UAAWmB,OCkBAL,GA1BqB,CAClCvJ,KAAK,WAAD,4BAAE,WAAOD,GAAP,mBAAAkB,EAAA,6DACEqI,EAAYoC,GAAMI,WAAWrD,UAAUA,UAAUa,UAGjDyC,EACJzC,EAAU2B,QAAU,EAChBe,KAAKC,IAAL,MAAAD,KAAI,aACC1C,EAAUiB,KAAI,SAACV,GAChB,OAAOA,EAASK,MAAMe,QAAU,EAC5Be,KAAKC,IAAL,MAAAD,KAAI,aAAQnC,EAASK,MAAMK,KAAI,SAAC2B,GAAD,OAAQA,EAAG9L,QAC1C,OAGR,EAEAoB,EAAqC,CACzC2I,KAAM,CACJ/J,GAAI2L,EAAQ,EACZjD,OAAQ/I,EAAQE,KAAK6I,SAlBrB,kBAqBG,CAAC,IAAKtH,IArBT,2CAAF,mDAAC,ICeQ+H,GAhBqB,CAClCvJ,KAAK,WAAD,4BAAE,WAAOD,GAAP,mBAAAkB,EAAA,6DACEqI,EAAYoC,GAAMI,WAAWrD,UAAUA,UAAUa,UACjDyC,EACJzC,EAAU2B,QAAU,EAAIe,KAAKC,IAAL,MAAAD,KAAI,aAAQ1C,EAAUiB,KAAI,SAAC2B,GAAD,OAAQA,EAAG9L,QAAO,EAChEoB,EAAyC,CAC7CqI,SAAU,CACRzJ,GAAI2L,EAAQ,EACZjD,OAAQ/I,EAAQE,KAAK6I,OACrBoB,MAAO,KARP,kBAWG,CAAC,IAAK1I,IAXT,2CAAF,mDAAC,ICWQ2K,GAbsB,CACnCnM,KAAK,WAAD,4BAAE,WAAOD,GAAP,eAAAkB,EAAA,6DACEO,EAA0C,CAC9CiH,UAAW,CACTrI,GAAI,EACJ0I,OAAQ/I,EAAQE,KAAK6I,OACrBQ,UAAW,KALX,kBAQG,CAAC,IAAK9H,IART,2CAAF,mDAAC,ICaQhB,GAda,CAC1BR,KAAK,WAAD,4BAAE,WAAOD,GAAP,eAAAkB,EAAA,6DACEO,EAA2B,CAC/BrB,KAAM,CACJC,GAAI,EACJC,KAAMN,EAAQE,KAAKI,KACnBC,MAAOP,EAAQE,KAAKK,OAEtBpB,YAAa,YAPX,kBASG,CAAC,IAAKsC,IATT,2CAAF,mDAAC,ICaQhB,GAda,CAC1BR,KAAK,WAAD,4BAAE,WAAOD,GAAP,eAAAkB,EAAA,6DACEO,EAA2B,CAC/BrB,KAAM,CACJC,GAAI,EACJC,KAAM,iCACNC,MAAOP,EAAQE,KAAKK,OAEtBpB,YAAa,YAPX,kBASG,CAAC,IAAKsC,IATT,2CAAF,mDAAC,ICDM4K,GAAY,WACvB,ICKc3M,IDJcA,ECIa4M,KAAW,CACpD,CACEb,KAAM,qDACNc,QAASC,IAEX,CACEf,KAAM,mCACNc,QAASE,IAEX,CACEhB,KAAM,aACNc,QAASG,IAEX,CACEjB,KAAM,gBACNc,QAASI,IAEX,CACElB,KAAM,gBACNc,QAASK,KAEVlN,EAAQ,KC3BEmN,GAAgB,WAE3B,OADAC,KACO,cAAC,GAAD,KAGHA,GAAQ,WACZT,MCHFU,IAASC,OACP,cAAC,aAAD,UACE,cAAC,IAAD,CAAUrB,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJsB,SAASC,eAAe,W","file":"static/js/main.f1480b03.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { LocalStorage } from 'types/auth'\n\nexport const setAccessToken = (storage: LocalStorage) => {\n  localStorage.setItem('accessToken', storage.accessToken)\n}\n\nexport const getAccessToken = () => {\n  const accessToken = localStorage.getItem('accessToken')\n  if (!accessToken) throw Error('Dont Have Access Token')\n  return accessToken\n}\n\nexport const hasAccessToken = () => {\n  try {\n    return Boolean(getAccessToken())\n  } catch (error) {\n    return false\n  }\n}\n","import axios from 'axios'\n\nconst BACKEND_URL = 'http://localhost:4000'\n\nexport const client = axios.create({\n  baseURL: BACKEND_URL,\n  timeout: 15000,\n})\n","import { client } from 'features/api'\nimport {\n  SignInRequest,\n  SignInResponse,\n  SignUpRequest,\n  SignUpResponse,\n} from 'types/auth'\n\nexport const api = {\n  signIn: (request: SignInRequest) =>\n    client.post<SignInResponse>('/auth/sign-in/', request.data),\n  signUp: (request: SignUpRequest) =>\n    client.post<SignUpResponse>('/auth/sign-up/', request.data),\n}\n","import { AuthLoading, AuthState } from './state'\nimport { IUser } from 'types/user'\n\nexport const initialUser: IUser = {\n  id: -1,\n  name: '',\n  email: '',\n}\n\nexport const initialLoading: AuthLoading = {\n  post: {\n    signIn: false,\n    signUp: false,\n  },\n}\n\nexport const initialState: AuthState = {\n  user: initialUser,\n  loading: initialLoading,\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { setAccessToken } from 'router/storage'\nimport {\n  SignInRequest,\n  SignInResponse,\n  SignUpRequest,\n  SignUpResponse,\n} from 'types/auth'\nimport { api } from './authAPI'\nimport { initialState } from './initialState'\n\nexport const redirectToHome = () => {\n  window.location.href = '/todo-frontend/dashboard/'\n}\n\nexport const signInAsync = createAsyncThunk<\n  SignInResponse,\n  SignInRequest,\n  { rejectValue: { errorMessage: string } }\n>('auth/signIn', async (data, thunkApi) => {\n  const response = await api\n    .signIn(data)\n    .then((res) => {\n      return res.data\n    })\n    .catch((e) => {\n      return thunkApi.rejectWithValue({ errorMessage: 'Auth Error: Sign In' })\n    })\n  return response\n})\n\nexport const signUpAsync = createAsyncThunk<\n  SignUpResponse,\n  SignUpRequest,\n  { rejectValue: { errorMessage: string } }\n>('auth/signUp', async (data, thunkApi) => {\n  const response = await api\n    .signUp(data)\n    .then((res) => {\n      return res.data\n    })\n    .catch((e) => {\n      return thunkApi.rejectWithValue({ errorMessage: 'Auth Error: Sign Up' })\n    })\n  return response\n})\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(signInAsync.pending, (state) => {\n        state.loading.post.signIn = true\n      })\n      .addCase(signInAsync.fulfilled, (state, action) => {\n        state.loading.post.signIn = false\n        state.user = action.payload.user\n        setAccessToken({ accessToken: action.payload.accessToken })\n        redirectToHome()\n      })\n      .addCase(signInAsync.rejected, (state) => {\n        state.loading.post.signIn = false\n      })\n      .addCase(signUpAsync.pending, (state) => {\n        state.loading.post.signUp = true\n      })\n      .addCase(signUpAsync.fulfilled, (state, action) => {\n        state.loading.post.signUp = false\n        state.user = action.payload.user\n        setAccessToken({ accessToken: action.payload.accessToken })\n        redirectToHome()\n      })\n      .addCase(signUpAsync.rejected, (state) => {\n        state.loading.post.signUp = false\n      })\n  },\n})\n\nexport const authReducer = authSlice.reducer\n","import Button from '@mui/material/Button'\nimport CssBaseline from '@mui/material/CssBaseline'\nimport TextField from '@mui/material/TextField'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport Checkbox from '@mui/material/Checkbox'\nimport Grid from '@mui/material/Grid'\nimport Box from '@mui/material/Box'\nimport Typography from '@mui/material/Typography'\nimport Container from '@mui/material/Container'\nimport { createTheme, ThemeProvider } from '@mui/material/styles'\nimport { useForm, SubmitHandler } from 'react-hook-form'\nimport { Link } from 'react-router-dom'\nimport { SignInForm } from 'types/auth'\nimport { useAppDispatch } from 'app/hooks'\nimport { signInAsync } from 'features/auth/authSlice'\n\nconst theme = createTheme()\n\nexport const SignIn: React.FC = () => {\n  const dispatch = useAppDispatch()\n  const { register, handleSubmit } = useForm<SignInForm>()\n  const onSubmit: SubmitHandler<SignInForm> = (data) =>\n    dispatch(signInAsync({ data }))\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <Box\n            component=\"form\"\n            onSubmit={handleSubmit(onSubmit)}\n            noValidate\n            sx={{ mt: 1 }}\n          >\n            <TextField\n              margin=\"normal\"\n              label=\"email\"\n              fullWidth\n              autoComplete=\"email\"\n              autoFocus\n              {...register('email', {\n                required: true,\n              })}\n            />\n            <TextField\n              margin=\"normal\"\n              label=\"password\"\n              fullWidth\n              type=\"password\"\n              autoComplete=\"current-password\"\n              {...register('password', {\n                required: true,\n              })}\n            />\n            <FormControlLabel\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\n              label=\"Remember me\"\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Sign In\n            </Button>\n            <Grid container>\n              <Grid item xs>\n                <Link to=\"#\">Forgot password?</Link>\n              </Grid>\n              <Grid item>\n                <Link to=\"/sign-up/\">Don't have an account? Sign Up</Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  )\n}\n","import Button from '@mui/material/Button'\nimport CssBaseline from '@mui/material/CssBaseline'\nimport TextField from '@mui/material/TextField'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport Checkbox from '@mui/material/Checkbox'\nimport Grid from '@mui/material/Grid'\nimport Box from '@mui/material/Box'\nimport Typography from '@mui/material/Typography'\nimport Container from '@mui/material/Container'\nimport { createTheme, ThemeProvider } from '@mui/material/styles'\nimport { useForm, SubmitHandler } from 'react-hook-form'\nimport { Link } from 'react-router-dom'\nimport { SignUpForm } from 'types/auth'\nimport { useAppDispatch } from 'app/hooks'\nimport { signUpAsync } from 'features/auth/authSlice'\n\nconst theme = createTheme()\n\nexport const SignUp: React.FC = () => {\n  const dispatch = useAppDispatch()\n  const { register, handleSubmit } = useForm<SignUpForm>()\n  const onSubmit: SubmitHandler<SignUpForm> = (data) =>\n    dispatch(signUpAsync({ data }))\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign up\n          </Typography>\n          <Box\n            component=\"form\"\n            noValidate\n            onSubmit={handleSubmit(onSubmit)}\n            sx={{ mt: 3 }}\n          >\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"name\"\n                  autoComplete=\"name\"\n                  {...register('name', { required: true })}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"email\"\n                  autoComplete=\"email\"\n                  {...register('email', { required: true })}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  type=\"password\"\n                  label=\"password\"\n                  autoComplete=\"new-password\"\n                  {...register('password', { required: true })}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Checkbox value=\"allowExtraEmails\" color=\"primary\" />\n                  }\n                  label=\"I want to receive inspiration, marketing promotions and updates via email.\"\n                />\n              </Grid>\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Sign Up\n            </Button>\n            <Grid container justifyContent=\"flex-end\">\n              <Grid item>\n                <Link to=\"/\">Already have an account? Sign in</Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  )\n}\n","import { createTheme, ThemeProvider } from '@mui/material/styles'\nimport CssBaseline from '@mui/material/CssBaseline'\nimport Box from '@mui/material/Box'\n\nexport const AppLayout: React.FC = (props) => {\n  const { children } = props\n\n  const mdTheme = createTheme()\n\n  return (\n    <ThemeProvider theme={mdTheme}>\n      <Box height={'100%'} sx={{ display: 'flex' }}>\n        <CssBaseline />\n        {children}\n      </Box>\n    </ThemeProvider>\n  )\n}\n","import Box from '@mui/material/Box'\nimport Toolbar from '@mui/material/Toolbar'\n\nexport const MainLayout: React.FC = (props) => {\n  const { children } = props\n\n  return (\n    <Box\n      component=\"main\"\n      sx={{\n        backgroundColor: (theme) =>\n          theme.palette.mode === 'light'\n            ? theme.palette.grey[100]\n            : theme.palette.grey[900],\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n      }}\n    >\n      <Toolbar />\n      {children}\n    </Box>\n  )\n}\n","import { styled } from '@mui/material/styles'\nimport MuiAppBar, { AppBarProps as MuiAppBarProps } from '@mui/material/AppBar'\nimport Toolbar from '@mui/material/Toolbar'\nimport IconButton from '@mui/material/IconButton'\nimport MenuIcon from '@mui/icons-material/Menu'\nimport Typography from '@mui/material/Typography'\nimport { DRAWER_WIDTH } from 'components/layout/consts'\n\ninterface AppBarProps extends MuiAppBarProps {\n  open?: boolean\n}\n\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== 'open',\n})<AppBarProps>(({ theme, open }) => ({\n  zIndex: theme.zIndex.drawer + 1,\n  transition: theme.transitions.create(['width', 'margin'], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  ...(open && {\n    marginLeft: DRAWER_WIDTH,\n    width: `calc(100% - ${DRAWER_WIDTH}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  }),\n}))\n\ninterface HeaderBarProps {\n  open: boolean\n  toggle: () => void\n  boardName: string\n}\n\nexport const HeaderBar: React.FC<HeaderBarProps> = (props) => {\n  const { open, toggle, boardName } = props\n\n  return (\n    <AppBar position=\"absolute\" open={open}>\n      <Toolbar\n        sx={{\n          pr: '24px', // keep right padding when drawer closed\n        }}\n      >\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          onClick={toggle}\n          sx={{\n            marginRight: '36px',\n            ...(open && { display: 'none' }),\n          }}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography\n          component=\"h1\"\n          variant=\"h6\"\n          color=\"inherit\"\n          noWrap\n          sx={{ flexGrow: 1 }}\n        >\n          {boardName}\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  )\n}\n","export const DRAWER_WIDTH = 240\n","import { styled } from '@mui/material/styles'\nimport MuiDrawer, { DrawerProps as MuiDrawerProps } from '@mui/material/Drawer'\nimport Toolbar from '@mui/material/Toolbar'\nimport List from '@mui/material/List'\nimport Divider from '@mui/material/Divider'\nimport IconButton from '@mui/material/IconButton'\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft'\nimport { DRAWER_WIDTH } from 'components/layout/consts'\n\nconst Drawer = styled(MuiDrawer, {\n  shouldForwardProp: (prop) => prop !== 'open',\n})<MuiDrawerProps>(({ theme, open }) => ({\n  '& .MuiDrawer-paper': {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: DRAWER_WIDTH,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    boxSizing: 'border-box',\n    ...(!open && {\n      overflowX: 'hidden',\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      width: theme.spacing(7),\n      [theme.breakpoints.up('sm')]: {\n        width: theme.spacing(9),\n      },\n    }),\n  },\n}))\n\ninterface SideBarProps {\n  open: boolean\n  toggle: () => void\n}\n\nexport const SideBar: React.FC<SideBarProps> = (props) => {\n  const { open, toggle, children } = props\n\n  return (\n    <Drawer variant=\"permanent\" open={open}>\n      <Toolbar\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'flex-end',\n          px: [1],\n        }}\n      >\n        <IconButton onClick={toggle}>\n          <ChevronLeftIcon />\n        </IconButton>\n      </Toolbar>\n      <Divider />\n      <List>{children}</List>\n    </Drawer>\n  )\n}\n","import { useState } from 'react'\nimport ListItem from '@mui/material/ListItem'\nimport ListItemIcon from '@mui/material/ListItemIcon'\nimport ListItemText from '@mui/material/ListItemText'\nimport DashboardIcon from '@mui/icons-material/Dashboard'\nimport PeopleIcon from '@mui/icons-material/People'\nimport SettingsIcon from '@mui/icons-material/Settings'\nimport { AppLayout, MainLayout } from 'components/layout'\nimport { HeaderBar, SideBar } from 'components/bar'\nimport { useAppSelector } from 'app/hooks'\n\nexport const PageLayout: React.FC = (props) => {\n  const { children } = props\n  const dashboard = useAppSelector((state) => state.dashboard.dashboard)\n  const [open, setOpen] = useState(false)\n  const toggle = () => setOpen((prev) => !prev)\n\n  const dashboardTittle = dashboard.tittle ? dashboard.tittle : '名称未設定'\n\n  return (\n    <AppLayout>\n      <HeaderBar open={open} toggle={toggle} boardName={dashboardTittle} />\n      <SideBar open={open} toggle={toggle}>\n        <ListItem button>\n          <ListItemIcon>\n            <DashboardIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Dashboard\" />\n        </ListItem>\n        <ListItem button>\n          <ListItemIcon>\n            <PeopleIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Members\" />\n        </ListItem>\n        <ListItem button>\n          <ListItemIcon>\n            <SettingsIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Settings\" />\n        </ListItem>\n      </SideBar>\n      <MainLayout>{children}</MainLayout>\n    </AppLayout>\n  )\n}\n","import { client } from 'features/api'\nimport {\n  CreateDashboardRequest,\n  CreateDashboardResponse,\n  CreateCardListRequest,\n  CreateCardListResponse,\n  CreateCardRequest,\n  CreateCardResponse,\n} from 'types/card'\n\nexport const api = {\n  createDashboard: (request: CreateDashboardRequest) =>\n    client.post<CreateDashboardResponse>('/dashboard/', request.data),\n  createCardLst: (request: CreateCardListRequest) =>\n    client.post<CreateCardListResponse>(\n      `/dashboard/${request.dashboardId}/cardList/`,\n      request.data\n    ),\n  createCard: (request: CreateCardRequest) =>\n    client.post<CreateCardResponse>(\n      `/dashboard/${request.dashboardId}/cardList/${request.cardListId}/cards/`,\n      request.data\n    ),\n}\n","import { DashboardLoading, DashboardState } from './state'\nimport { IDashboard } from 'types/card'\n\nconst initialDashboardState: IDashboard = {\n  id: -1,\n  tittle: '',\n  cardLists: [],\n}\n\nconst initialLoading: DashboardLoading = {\n  post: {\n    create: false,\n    createCardList: false,\n    createCard: false,\n  },\n}\n\nexport const initialState: DashboardState = {\n  dashboard: initialDashboardState,\n  loading: initialLoading,\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport * as types from 'types/card'\nimport { api } from './dashboardAPI'\nimport { initialState } from './initialState'\n\nexport const createDashboardAsync = createAsyncThunk<\n  types.CreateDashboardResponse,\n  types.CreateDashboardRequest,\n  { rejectValue: { errorMessage: string } }\n>('dashboard/create', async (data, thunkApi) => {\n  const response = await api\n    .createDashboard(data)\n    .then((res) => res.data)\n    .catch((e) => {\n      return thunkApi.rejectWithValue({\n        errorMessage: 'ダッシュボードの作成に失敗しました',\n      })\n    })\n  return response\n})\n\nexport const createCardAsync = createAsyncThunk<\n  types.CreateCardResponse,\n  types.CreateCardRequest,\n  { rejectValue: { errorMessage: string } }\n>('dashboard/createCard', async (data, thunkApi) => {\n  const response = await api\n    .createCard(data)\n    .then((res) => res.data)\n    .catch((e) => {\n      return thunkApi.rejectWithValue({\n        errorMessage: 'カードの作成に失敗しました',\n      })\n    })\n  return response\n})\n\nexport const createCardLstAsync = createAsyncThunk<\n  types.CreateCardListResponse,\n  types.CreateCardListRequest,\n  { rejectValue: { errorMessage: string } }\n>('dashboard/createCardList', async (data, thunkApi) => {\n  const response = await api\n    .createCardLst(data)\n    .then((res) => res.data)\n    .catch((e) => {\n      return thunkApi.rejectWithValue({\n        errorMessage: 'カードリストの作成に失敗しました',\n      })\n    })\n  return response\n})\n\nexport const dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(createDashboardAsync.pending, (state) => {\n        state.loading.post.create = true\n      })\n      .addCase(createDashboardAsync.fulfilled, (state, action) => {\n        state.loading.post.create = false\n        state.dashboard = action.payload.dashboard\n      })\n      .addCase(createDashboardAsync.rejected, (state) => {\n        state.loading.post.create = false\n      })\n      .addCase(createCardLstAsync.pending, (state) => {\n        state.loading.post.createCardList = true\n      })\n      .addCase(createCardLstAsync.fulfilled, (state, action) => {\n        state.loading.post.createCardList = false\n        state.dashboard.cardLists = [\n          ...state.dashboard.cardLists,\n          action.payload.cardList,\n        ]\n      })\n      .addCase(createCardLstAsync.rejected, (state) => {\n        state.loading.post.createCardList = false\n      })\n      .addCase(createCardAsync.pending, (state) => {\n        state.loading.post.createCard = true\n      })\n      .addCase(createCardAsync.fulfilled, (state, action) => {\n        state.loading.post.createCard = false\n        const targetCardListIndex = state.dashboard.cardLists.findIndex(\n          (cardList) => cardList.id === action.meta.arg.cardListId\n        )\n        state.dashboard.cardLists[targetCardListIndex].cards = [\n          ...state.dashboard.cardLists[targetCardListIndex].cards,\n          action.payload.card,\n        ]\n      })\n      .addCase(createCardAsync.rejected, (state) => {\n        state.loading.post.createCard = false\n      })\n  },\n})\n\nexport const dashboardReducer = dashboardSlice.reducer\n","import { useState } from 'react'\nimport { PageLayout } from 'components/layout'\nimport Box from '@mui/material/Box'\nimport TextField from '@mui/material/TextField'\nimport Typography from '@mui/material/Typography'\nimport Button from '@mui/material/Button'\nimport IconButton from '@mui/material/IconButton'\nimport { useForm, SubmitHandler } from 'react-hook-form'\nimport { Card } from '@mui/material'\nimport CloseIcon from '@mui/icons-material/Close'\nimport {\n  createCardLstAsync,\n  createCardAsync,\n} from 'features/dashboard/dashboardSlice'\nimport { CreateCardListForm, ICard, ICardList, IDashboard } from 'types/card'\nimport { useAppDispatch } from 'app/hooks'\n\nconst CARD_LIST_WIDTH = 360\n\ntype PresenterProps = {\n  dashboard: IDashboard\n}\n\nexport const Presenter: React.FC<PresenterProps> = (props) => {\n  const { dashboard } = props\n\n  return (\n    <PageLayout>\n      <Dashboard cardLists={dashboard.cardLists} />\n    </PageLayout>\n  )\n}\n\ntype DashboardProps = {\n  cardLists: ICardList[]\n}\n\nconst Dashboard: React.FC<DashboardProps> = (props) => {\n  const { cardLists } = props\n\n  return (\n    <Box\n      overflow=\"auto\"\n      sx={{\n        display: 'flex',\n        flexDirection: 'row',\n        m: 4,\n        height: 640,\n      }}\n    >\n      {cardLists.map((cardList, index) => (\n        <CardList\n          key={`cardList-${index}`}\n          name={cardList.tittle}\n          cardListId={cardList.id}\n          cards={cardList.cards}\n        />\n      ))}\n      <AddCardList />\n    </Box>\n  )\n}\n\nconst AddCardList: React.VFC = (props) => {\n  const { register, reset, handleSubmit } = useForm<{ tittle: string }>()\n  const [open, setOpen] = useState(false)\n  const openForm = () => {\n    // 上位のDOMでcloseのonClockが反応してしまうため、ifで判定\n    if (!open) setOpen(true)\n  }\n  const closeForm = () => {\n    setOpen(false)\n    reset()\n  }\n  const dispatch = useAppDispatch()\n  const onSubmit: SubmitHandler<CreateCardListForm> = (data) => {\n    dispatch(createCardLstAsync({ dashboardId: 1, data: data }))\n    setOpen(false)\n    reset()\n  }\n\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={handleSubmit(onSubmit)}\n      sx={{ display: 'block' }}\n    >\n      <Card\n        sx={{\n          minWidth: CARD_LIST_WIDTH,\n          m: 2,\n          p: 2,\n          backgroundColor: '#ffffff3d',\n        }}\n        onClick={openForm}\n      >\n        リストを追加\n        {open && (\n          <>\n            <TextField\n              margin=\"normal\"\n              placeholder=\"リストのタイトルを入力...\"\n              sx={{ maxWidth: 320 }}\n              fullWidth\n              autoFocus\n              {...register('tittle')}\n            />\n            <IconButton onClick={closeForm}>\n              <CloseIcon />\n            </IconButton>\n          </>\n        )}\n      </Card>\n    </Box>\n  )\n}\n\ntype CardListProps = {\n  name: string\n  cardListId: number\n  cards: ICard[]\n}\n\nconst CardList: React.FC<CardListProps> = (props) => {\n  const { name, cardListId, cards } = props\n  const [open, setOpen] = useState(false)\n  const { register, reset, handleSubmit } = useForm<{ tittle: string }>()\n\n  const dispatch = useAppDispatch()\n  const onSubmit: SubmitHandler<{ tittle: string }> = (data) => {\n    dispatch(\n      createCardAsync({ dashboardId: 1, cardListId: cardListId, data: data })\n    )\n    toggleButton()\n  }\n\n  const toggleButton = () => {\n    setOpen((prev) => !prev)\n    reset()\n  }\n\n  return (\n    <Box\n      sx={{\n        minWidth: CARD_LIST_WIDTH,\n        display: 'block',\n      }}\n    >\n      <Box\n        component=\"form\"\n        onSubmit={handleSubmit(onSubmit)}\n        sx={{\n          display: 'flex',\n          alignItems: 'flex-start',\n          flexDirection: 'column',\n          backgroundColor: '#ebecf0',\n          p: 2,\n          m: 2,\n        }}\n      >\n        <Typography>{name}</Typography>\n        {cards.length >= 1 &&\n          cards.map((card, index) => (\n            <CardItem key={`card-${index}`} card={card} />\n          ))}\n        {open && (\n          <TextField\n            margin=\"normal\"\n            placeholder=\"タイトルを入力...\"\n            fullWidth\n            autoFocus\n            {...register('tittle')}\n          />\n        )}\n        <Button sx={{ mt: 2 }} variant=\"outlined\" onClick={toggleButton}>\n          カードを追加\n        </Button>\n      </Box>\n    </Box>\n  )\n}\n\ntype CardItemProps = {\n  card: ICard\n}\n\nconst CardItem: React.FC<CardItemProps> = (props) => {\n  const { card } = props\n  return <Card sx={{ mt: 2, p: 2, width: '100%' }}>{card.tittle}</Card>\n}\n","import { useAppSelector } from 'app/hooks'\nimport { Presenter } from './presenter'\n\nexport const Container: React.FC = () => {\n  const dashboard = useAppSelector((state) => state.dashboard.dashboard)\n\n  return <Presenter dashboard={dashboard} />\n}\n","import { Route, Routes, BrowserRouter, Navigate } from 'react-router-dom'\nimport { SignIn } from 'pages/signIn'\nimport { SignUp } from 'pages/signUp/SignUp'\nimport { Container as DashBoad } from 'pages/dsshBoad'\nimport { hasAccessToken } from './storage'\n\nexport const AppRouter: React.VFC = () => {\n  const hasToken = hasAccessToken()\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Routes>\n        {hasToken ? (\n          <>\n            <Route path=\"/dashboard/\" element={<DashBoad />} />\n            <Route path=\"*\" element={<Navigate to=\"/dashboard/\" />} />\n          </>\n        ) : (\n          <>\n            <Route path=\"/sign-in/\" element={<SignIn />} />\n            <Route path=\"/sign-up/\" element={<SignUp />} />\n            <Route path=\"*\" element={<Navigate to=\"/sign-in/\" />} />\n          </>\n        )}\n      </Routes>\n    </BrowserRouter>\n  )\n}\n","import {\n  configureStore,\n  combineReducers,\n  ThunkAction,\n  Action,\n} from '@reduxjs/toolkit'\nimport { authReducer } from 'features/auth/authSlice'\nimport { dashboardReducer } from 'features/dashboard/dashboardSlice'\n\nexport const store = configureStore({\n  reducer: combineReducers({\n    auth: authReducer,\n    dashboard: dashboardReducer,\n  }),\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","import { store } from 'app/store'\nimport { MockMethods, MockResponse } from 'axios-mock-server'\nimport * as types from 'types/card'\n\nconst createCardList: MockMethods = {\n  post: async (request): Promise<MockResponse> => {\n    const cardLists = store.getState().dashboard.dashboard.cardLists\n\n    // cardListsの中でIDの最大値のリストを作成し、さらにその中から最大値を取得する\n    const maxId =\n      cardLists.length >= 1\n        ? Math.max(\n            ...cardLists.map((cardList) => {\n              return cardList.cards.length >= 1\n                ? Math.max(...cardList.cards.map((it) => it.id))\n                : 0\n            })\n          )\n        : 0\n\n    const response: types.CreateCardResponse = {\n      card: {\n        id: maxId + 1,\n        tittle: request.data.tittle,\n      },\n    }\n    return [200, response]\n  },\n}\n\nexport default createCardList\n","import { store } from 'app/store'\nimport { MockMethods, MockResponse } from 'axios-mock-server'\nimport * as types from 'types/card'\n\nconst createCardList: MockMethods = {\n  post: async (request): Promise<MockResponse> => {\n    const cardLists = store.getState().dashboard.dashboard.cardLists\n    const maxId =\n      cardLists.length >= 1 ? Math.max(...cardLists.map((it) => it.id)) : 0\n    const response: types.CreateCardListResponse = {\n      cardList: {\n        id: maxId + 1,\n        tittle: request.data.tittle,\n        cards: [],\n      },\n    }\n    return [200, response]\n  },\n}\n\nexport default createCardList\n","import { MockMethods, MockResponse } from 'axios-mock-server'\nimport * as types from 'types/card'\n\nconst createDashboard: MockMethods = {\n  post: async (request): Promise<MockResponse> => {\n    const response: types.CreateDashboardResponse = {\n      dashboard: {\n        id: 1,\n        tittle: request.data.tittle,\n        cardLists: [],\n      },\n    }\n    return [200, response]\n  },\n}\n\nexport default createDashboard\n","import { MockMethods, MockResponse } from 'axios-mock-server'\nimport { SignUpRequest, SignUpResponse } from 'types/auth'\n\nconst signIn: MockMethods = {\n  post: async (request: SignUpRequest): Promise<MockResponse> => {\n    const response: SignUpResponse = {\n      user: {\n        id: 1,\n        name: request.data.name,\n        email: request.data.email,\n      },\n      accessToken: 'hogehoge',\n    }\n    return [200, response]\n  },\n}\n\nexport default signIn\n","import { MockMethods, MockResponse } from 'axios-mock-server'\nimport { SignInRequest, SignInResponse } from 'types/auth'\n\nconst signIn: MockMethods = {\n  post: async (request: SignInRequest): Promise<MockResponse> => {\n    const response: SignInResponse = {\n      user: {\n        id: 1,\n        name: 'テスト太郎',\n        email: request.data.email,\n      },\n      accessToken: 'hogehoge',\n    }\n    return [200, response]\n  },\n}\n\nexport default signIn\n","import mock from 'mocks/$mock'\nimport { client } from 'features/api'\n\nexport const setupMock = () => {\n  const mocked = process.env.REACT_APP_MOCKED\n  if (mocked === 'true') mock(client)\n}\n","/* eslint-disable */\nimport { AxiosInstance } from 'axios'\nimport mockServer from 'axios-mock-server'\nimport mock0 from './dashboard/_dashboardId/cardList/_cardListId/cards'\nimport mock1 from './dashboard/_dashboardId/cardList'\nimport mock2 from './dashboard'\nimport mock3 from './auth/sign-up'\nimport mock4 from './auth/sign-in'\n\nexport default (client?: AxiosInstance) => mockServer([\n  {\n    path: '/dashboard/_dashboardId/cardList/_cardListId/cards',\n    methods: mock0\n  },\n  {\n    path: '/dashboard/_dashboardId/cardList',\n    methods: mock1\n  },\n  {\n    path: '/dashboard',\n    methods: mock2\n  },\n  {\n    path: '/auth/sign-up',\n    methods: mock3\n  },\n  {\n    path: '/auth/sign-in',\n    methods: mock4\n  }\n], client, '')\n","import { AppRouter } from 'router'\nimport { setupMock } from 'mocks/setup'\n\nexport const App: React.FC = () => {\n  setUp()\n  return <AppRouter />\n}\n\nconst setUp = () => {\n  setupMock()\n}\n","import { StrictMode } from 'react'\nimport { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport { store } from './app/store'\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}